name: Build and publish Docker image

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-openapi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Check spec
        run: npx @openapitools/openapi-generator-cli validate -i openapi-spec/gps-routes.yaml

  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    services:
      docker:
        image: docker:dind
        options: --privileged

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install testcontainers dependencies
        run: docker --version

      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Test
        run: |
          go install gotest.tools/gotestsum@latest
          mkdir -p ./test-reports/
          gotestsum --junitfile=./test-reports/junit.xml --format github-actions -- -v -coverprofile=profile.cov -coverpkg=./... ./...

      - name: Collect test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./test-reports/

      - name: Publish test results
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          report_paths: "./test-reports/junit.xml"
          comment: true
          include_passed: true
          detailed_summary: true

      - name: Upload coverage to Coveralls
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: profile.cov

      - name: Lint
        uses: golangci/golangci-lint-action@v7

  docker-publish:
    concurrency:
      group: "publishing-${{ matrix.platform.arch }}"
    needs:
      - build-and-test
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-24.04
            arch: linux/amd64
          - os: ubuntu-24.04-arm
            arch: linux/arm64
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform.arch }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Checkout repository with full history
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: "Log into registry: ${{ env.REGISTRY }}"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha
          labels: |
            maintainer=rm-hull
            org.opencontainers.image.description=REST API for GPS routes
            org.opencontainers.image.licenses=MIT

      - name: Build and push by digest
        uses: docker/build-push-action@v6
        id: build-docker
        with:
          context: .
          platforms: ${{ matrix.platform.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build-docker.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - docker-publish
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: "Log into registry: ${{ env.REGISTRY }}"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            type=sha
          labels: |
            maintainer=rm-hull
            org.opencontainers.image.description=REST API for GPS routes
            org.opencontainers.image.licenses=MIT

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
